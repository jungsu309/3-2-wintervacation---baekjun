211024 최단경로 개인공부

가장 빠른 경로를 찾기. = 길찾기
- 한지점에서 다른 지점까지의 최단경로 
- 모든 지점에서 다른 모든 지점까지의 최단경로를 전부 구하기
등등의 사례가 있음

최단경로는 다익스트라, 플로이드워셜, 벨만포드 정도를 다룸
책에서는 다익스트라. 플로이드 두가지만 하는데 이게 제일 많이 나옴.


1. 다익스트라 : 기본적으로 그리디알고리즘. - 매번 가장 비용이 적게 드는 노드를 선택
대회를 준비하려면 구현하기 좀 어렵지만 빠르게 작동하는 코드를 외워서 바로 작성할수
잇을정도로 숙달될 수 잇도록 연습을 많이 해야한다. 많은 연습이 필요하다

먼저 시작노드 제외하고 나머지 노드의 최단거리를 무한으로 설정

그다음 이웃한 노드를 통해 새 노드에 대한 짧은 경로를 찾아 갱신한다.

그 짧은노드로 갱신되었을 때 값이 제일 작은 노드를 선택한다.
해당 노드를 거쳐서 갈수있는 노드를 확인함. 해당 노드가 기존보다 작아지면 갱신

(일반적으로 거리가 같을 때 노드 숫자가 작은걸 먼저 선택)

-->반복하기.

간단한 다익스트라 예시 있는데 파이썬에다가 직접 해봄.

간선이나 노드의 개수가 너무 많을경우, 개선된 다익스트라알고리즘이용해야한다.
단순한 다익스트라 -> O(V^2)
개선된 다익스트라 -> O(ElogV)

개선된 다익스트라는 힙구조를 이용. 우선순위 큐 라이브러리를 거의다 지원하기때문에
직접 힙을 구현하지는 않아도된다. 
이경우 두가지 라이브러리를 이용할 수 있다. priorityQueue, heapq를 사용할수잇는데
시간은 heapq가 더 빠르기때문에 시간이 제한된경우는 heapq를 사용하는게 나음

힙 할때 (가치, 물건)이렇게 되어있으면 주로 맨 앞에것이 우선순위가 됨. 가치가 우선순위가높은거임
항상 가치가 높은게 먼저나옴. 

우선순위큐를 만들때 내부적으로 최소힙, 최대힙을 이용하게됨.
최소힙은 값이 낮은 데이터가 먼저삭제되고 최대힙은 값이 큰 데이터가 먼저 삭제.
기본이 최소힙인데, 다익스트라--> 최대 거리를 구하는거라 그대로 해도됨
최소힙을 최대힙처럼 사용하고싶을땐 음수부호이용하기

아까처럼 하면 되는데 아까는 graph리스트를 이용하여 [0]에는 도착노드 [1]에는 거리를 넣어줫는데
이번엔 우선순위 큐를 이용하여  (거리, 도착노드번호) 처럼 사용한다.

간단한 다익스트라에서 가장짧은 최단거리를 갖는 노드를 찾는 함수가 필요가 없어진다.
왜냐면 우선순위 큐이기때문에 알아서 해주기때문.

heapq로 개선한 다익스트라도 직접ㅎㅐ봄.


두번째 알고리즘 - 플로이드 워셜 알고리즘
모든지점에서 다른 모든 지점까지의 최단경로를 모두 구해야하는 경우에 사용할 수 있다.
코드도 되게 짧다!
복잡도는 O(N^3). 점화식이 있는 다이나믹 프로그래밍의 한종류
Dab = min(Dab, Dak + Dkb)

그래프는 노드의 개수만큼 N*N그래프를 그리고, 연결이안되있는 부분은 INF처리함
위 점화식을 이용하여 계속 갱신해준다. 노드의 개수만큼 step을 밟음 따라서 N^3 의 복잡도인것

플로이드 알고리즘 idle에다해봄.


